#!/usr/bin/env python3

# WARNING: CAVEAT UTILITOR
#
#  This file was automatically generated by TatSu.
#
#     https://pypi.python.org/pypi/tatsu/
#
#  Any changes you make to it will be overwritten the next time
#  the file is generated.

# ruff: noqa: C405, COM812, I001, F401, PLR1702, PLC2801, SIM117

import sys
from pathlib import Path

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname
from tatsu.infos import ParserConfig
from tatsu.util import re, generic_main


KEYWORDS: set[str] = set()


class minCBuffer(Buffer):
    def __init__(self, text, /, config: ParserConfig | None = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
            comments=None,
            eol_comments=None,
            keywords=KEYWORDS,
            start='start',
        )
        config = config.replace(**settings)

        super().__init__(text, config=config)


class minCParser(Parser):
    def __init__(self, /, config: ParserConfig | None = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
            comments=None,
            eol_comments=None,
            keywords=KEYWORDS,
            start='start',
        )
        config = config.replace(**settings)

        super().__init__(config=config)

    @tatsumasu()
    def _start_(self):
        self._program_()
        self._check_eof()

    @tatsumasu('Program')
    def _program_(self):

        def block0():
            self._definition_()
        self._closure(block0)
        self.name_last_node('definitions')

    @tatsumasu()
    def _definition_(self):
        with self._choice():
            with self._option():
                self._fun_definition_()
                self.name_last_node('@')
            with self._option():
                self._declaration_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<declaration> <declaration_specifiers>'
                '<fun_definition>'
            )

    @tatsumasu('FuncDefinition')
    def _fun_definition_(self):
        self._declaration_specifiers_()
        self.name_last_node('type')
        self._declarator_()
        self.name_last_node('decl')
        self._compound_stmt_()
        self.name_last_node('body')
        self._define(['body', 'decl', 'type'], [])

    @tatsumasu('Declaration')
    def _declaration_(self):
        self._declaration_specifiers_()
        self.name_last_node('specifier')

        def sep0():
            self._token(',')

        def block1():
            self._init_declarator_()
        self._positive_gather(block1, sep0)
        self.name_last_node('decls')
        self._token(';')
        self._define(['decls', 'specifier'], [])

    @tatsumasu()
    def _declaration_specifiers_(self):
        self._type_specifier_()
        self.name_last_node('@')

    @tatsumasu()
    def _type_specifier_(self):
        with self._choice():
            with self._option():
                self._primitive_type_()
                self.name_last_node('@')
            with self._option():
                self._struct_or_union_specifier_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                "'bool' 'char' 'double' 'float' 'int'"
                "'long' 'short' 'string' 'struct' 'union'"
                "'void' <primitive_type>"
                '<struct_or_union_specifier>'
            )

    @tatsumasu('PrimitiveType')
    def _primitive_type_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('long')
                with self._option():
                    self._token('int')
                with self._option():
                    self._token('short')
                with self._option():
                    self._token('char')
                with self._option():
                    self._token('void')
                with self._option():
                    self._token('float')
                with self._option():
                    self._token('double')
                with self._option():
                    self._token('bool')
                with self._option():
                    self._token('string')
                self._error(
                    'expecting one of: '
                    "'bool' 'char' 'double' 'float' 'int'"
                    "'long' 'short' 'string' 'void'"
                )
        self.name_last_node('type')

    @tatsumasu('StructOrUnionSpecifier')
    def _struct_or_union_specifier_(self):
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('struct')
                        with self._option():
                            self._token('union')
                        self._error(
                            'expecting one of: '
                            "'struct' 'union'"
                        )
                self.name_last_node('type')
                self._token('{')

                def block0():
                    self._struct_declaration_()
                self._closure(block0)
                self.name_last_node('members')
                self._token('}')
                self._define(['members', 'type'], [])
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('struct')
                        with self._option():
                            self._token('union')
                        self._error(
                            'expecting one of: '
                            "'struct' 'union'"
                        )
                self.name_last_node('type')
                self._identifier_()
                self.name_last_node('name')
                self._token('{')

                def block1():
                    self._struct_declaration_()
                self._closure(block1)
                self.name_last_node('members')
                self._token('}')
                self._define(['members', 'name', 'type'], [])
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('struct')
                        with self._option():
                            self._token('union')
                        self._error(
                            'expecting one of: '
                            "'struct' 'union'"
                        )
                self.name_last_node('type')
                self._identifier_()
                self.name_last_node('name')
                self._define(['name', 'type'], [])
            self._error(
                'expecting one of: '
                "'struct' 'union'"
            )

    @tatsumasu('StructDeclaration')
    def _struct_declaration_(self):
        self._specifier_qualifier_list_()
        self.name_last_node('specifier')

        def sep0():
            self._token(',')

        def block1():
            self._struct_declarator_()
        self._positive_gather(block1, sep0)
        self.name_last_node('declarators')
        self._token(';')
        self._define(['declarators', 'specifier'], [])

    @tatsumasu()
    def _specifier_qualifier_list_(self):
        self._type_specifier_()
        self.name_last_node('@')

    @tatsumasu()
    @nomemo
    def _struct_declarator_(self):
        self._declarator_()
        self.name_last_node('@')

    @tatsumasu('InitDeclarator')
    def _init_declarator_(self):
        with self._choice():
            with self._option():
                self._declarator_()
                self.name_last_node('decl')
                self._token('=')
                self._cut()
                self._initializer_()
                self.name_last_node('init')
                self._define(['decl', 'init'], [])
            with self._option():
                self._declarator_()
                self.name_last_node('decl')
            self._error(
                'expecting one of: '
                '<declarator> <direct_declarator>'
                '<pointer_declarator>'
            )

    @tatsumasu()
    @nomemo
    def _initializer_(self):
        self._assignment_expr_()
        self.name_last_node('@')

    @tatsumasu()
    @nomemo
    def _declarator_(self):
        with self._choice():
            with self._option():
                self._pointer_declarator_()
                self.name_last_node('@')
            with self._option():
                self._direct_declarator_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<direct_array_declarator>'
                '<direct_declarator>'
                '<direct_func_declarator>'
                '<direct_parenthesis_declarator>'
                '<identifier_declarator> <pointer>'
                '<pointer_declarator>'
            )

    @tatsumasu('PointerDeclarator')
    def _pointer_declarator_(self):
        self._pointer_()
        self.name_last_node('ptr')
        self._declarator_()
        self.name_last_node('decl')
        self._define(['decl', 'ptr'], [])

    @tatsumasu('Pointer')
    def _pointer_(self):
        self._pattern('[*]+')
        self.name_last_node('ptr')

    @tatsumasu()
    @leftrec
    def _direct_declarator_(self):
        with self._choice():
            with self._option():
                self._direct_array_declarator_()
                self.name_last_node('@')
            with self._option():
                self._direct_func_declarator_()
                self.name_last_node('@')
            with self._option():
                self._direct_parenthesis_declarator_()
                self.name_last_node('@')
            with self._option():
                self._identifier_declarator_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                "'(' <direct_array_declarator>"
                '<direct_declarator>'
                '<direct_func_declarator>'
                '<direct_parenthesis_declarator>'
                '<identifier> <identifier_declarator>'
            )

    @tatsumasu('IdentifierDeclarator')
    def _identifier_declarator_(self):
        self._identifier_()
        self.name_last_node('name')

    @tatsumasu('ParenthesisDeclarator')
    def _direct_parenthesis_declarator_(self):
        self._token('(')
        self._declarator_()
        self.name_last_node('decl')
        self._token(')')
        self._define(['decl'], [])

    @tatsumasu('ArrayDeclarator')
    @nomemo
    def _direct_array_declarator_(self):
        with self._choice():
            with self._option():
                self._direct_declarator_()
                self.name_last_node('decl')
                self._token('[')
                self._token(']')
                self._define(['decl'], [])
            with self._option():
                self._direct_declarator_()
                self.name_last_node('decl')
                self._token('[')
                self._assignment_expr_()
                self.name_last_node('size')
                self._token(']')
                self._define(['decl', 'size'], [])
            self._error(
                'expecting one of: '
                "'(' <direct_array_declarator>"
                '<direct_declarator>'
                '<direct_func_declarator>'
                '<direct_parenthesis_declarator>'
                '<identifier> <identifier_declarator>'
            )

    @tatsumasu('FuncDeclarator')
    @nomemo
    def _direct_func_declarator_(self):
        self._direct_declarator_()
        self.name_last_node('decl')
        self._token('(')

        def sep0():
            self._token(',')

        def block1():
            self._parameter_declaration_()
        self._gather(block1, sep0)
        self.name_last_node('params')
        self._token(')')
        self._define(['decl', 'params'], [])

    @tatsumasu('ParameterDeclaration')
    def _parameter_declaration_(self):
        self._declaration_specifiers_()
        self.name_last_node('specifier')
        self._declarator_()
        self.name_last_node('declarator')
        self._define(['declarator', 'specifier'], [])

    @tatsumasu()
    @nomemo
    def _stmt_(self):
        with self._choice():
            with self._option():
                self._continue_stmt_()
                self.name_last_node('@')
            with self._option():
                self._break_stmt_()
                self.name_last_node('@')
            with self._option():
                self._return_stmt_()
                self.name_last_node('@')
            with self._option():
                self._compound_stmt_()
                self.name_last_node('@')
            with self._option():
                self._if_stmt_()
                self.name_last_node('@')
            with self._option():
                self._while_stmt_()
                self.name_last_node('@')
            with self._option():
                self._for_stmt_()
                self.name_last_node('@')
            with self._option():
                self._expr_stmt_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                "';' 'break' 'continue' 'for' 'if'"
                "'return' 'while' '{' <break_stmt>"
                '<compound_stmt> <continue_stmt> <expr>'
                '<expr_stmt> <for_stmt> <if_stmt>'
                '<return_stmt> <while_stmt>'
            )

    @tatsumasu('ExprStmt')
    @nomemo
    def _expr_stmt_(self):
        with self._choice():
            with self._option():
                self._token(';')
            with self._option():
                self._expr_()
                self.name_last_node('expression')
                self._token(';')
                self._define(['expression'], [])
            self._error(
                'expecting one of: '
                "';' <assignment_expr> <comma_expr>"
                '<expr>'
            )

    @tatsumasu('ContinueStmt')
    def _continue_stmt_(self):
        self._token('continue')
        self._token(';')

    @tatsumasu('BreakStmt')
    def _break_stmt_(self):
        self._token('break')
        self._token(';')

    @tatsumasu('ReturnStmt')
    def _return_stmt_(self):
        self._token('return')
        self._cut()
        with self._optional():
            self._expr_()
            self.name_last_node('value')
        self._token(';')
        self._define(['value'], [])

    @tatsumasu('CompoundStmt')
    def _compound_stmt_(self):
        self._token('{')

        def block0():
            with self._choice():
                with self._option():
                    self._declaration_()
                with self._option():
                    self._stmt_()
                self._error(
                    'expecting one of: '
                    '<declaration> <stmt>'
                )
        self._closure(block0)
        self.name_last_node('items_')
        self._token('}')
        self._define(['items_'], [])

    @tatsumasu('IfStmt')
    def _if_stmt_(self):
        self._token('if')
        self._token('(')
        self._expr_()
        self.name_last_node('cond')
        self._token(')')
        self._stmt_()
        self.name_last_node('then')
        with self._optional():
            self._token('else')
            self._stmt_()
            self.name_last_node('else_')
            self._define(['else_'], [])
        self._define(['cond', 'else_', 'then'], [])

    @tatsumasu('WhileStmt')
    def _while_stmt_(self):
        self._token('while')
        self._token('(')
        self._expr_()
        self.name_last_node('cond')
        self._token(')')
        self._stmt_()
        self.name_last_node('loop')
        self._define(['cond', 'loop'], [])

    @tatsumasu('ForStmt')
    def _for_stmt_(self):
        with self._choice():
            with self._option():
                self._token('for')
                self._token('(')
                self._expr_stmt_()
                self.name_last_node('init')
                self._expr_stmt_()
                self.name_last_node('cond')
                self._token(')')
                self._stmt_()
                self.name_last_node('loop')
                self._define(['cond', 'init', 'loop'], [])
            with self._option():
                self._token('for')
                self._token('(')
                self._expr_stmt_()
                self.name_last_node('init')
                self._expr_stmt_()
                self.name_last_node('cond')
                self._expr_()
                self.name_last_node('update_')
                self._token(')')
                self._stmt_()
                self.name_last_node('loop')
                self._define(['cond', 'init', 'loop', 'update_'], [])
            with self._option():
                self._token('for')
                self._token('(')
                self._declaration_()
                self.name_last_node('init')
                self._expr_stmt_()
                self.name_last_node('cond')
                self._token(')')
                self._stmt_()
                self.name_last_node('loop')
                self._define(['cond', 'init', 'loop'], [])
            with self._option():
                self._token('for')
                self._token('(')
                self._declaration_()
                self.name_last_node('init')
                self._expr_stmt_()
                self.name_last_node('cond')
                self._expr_()
                self.name_last_node('update_')
                self._token(')')
                self._stmt_()
                self.name_last_node('loop')
                self._define(['cond', 'init', 'loop', 'update_'], [])
            self._error(
                'expecting one of: '
                "'for'"
            )

    @tatsumasu()
    @leftrec
    def _expr_(self):
        with self._choice():
            with self._option():
                self._comma_expr_()
                self.name_last_node('@')
            with self._option():
                self._assignment_expr_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<assignment> <assignment_expr>'
                '<comma_expr> <cond_expr> <expr>'
            )

    @tatsumasu('CommaExpr')
    @nomemo
    def _comma_expr_(self):
        self._expr_()
        self.add_last_node_to_name('args')
        self._token(',')
        self.name_last_node('op')
        self._assignment_expr_()
        self.add_last_node_to_name('args')
        self._define(
            ['op'],
            ['args'],
        )

    @tatsumasu()
    @nomemo
    def _assignment_expr_(self):
        with self._choice():
            with self._option():
                self._assignment_()
                self.name_last_node('@')
            with self._option():
                self._cond_expr_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<assignment> <cond> <cond_expr>'
                '<logical_or_expr> <unary_expr>'
            )

    @tatsumasu('BinaryExpr')
    @nomemo
    def _assignment_(self):
        self._unary_expr_()
        self.add_last_node_to_name('args')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('=')
                with self._option():
                    self._token('+=')
                with self._option():
                    self._token('-=')
                with self._option():
                    self._token('*=')
                with self._option():
                    self._token('/=')
                with self._option():
                    self._token('%=')
                self._error(
                    'expecting one of: '
                    "'%=' '*=' '+=' '-=' '/=' '='"
                )
        self.name_last_node('op')
        self._assignment_expr_()
        self.add_last_node_to_name('args')
        self._define(
            ['op'],
            ['args'],
        )

    @tatsumasu()
    @nomemo
    def _cond_expr_(self):
        with self._choice():
            with self._option():
                self._cond_()
                self.name_last_node('@')
            with self._option():
                self._logical_or_expr_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<cond> <logical_and_expr> <logical_or>'
                '<logical_or_expr>'
            )

    @tatsumasu('CondExpr')
    @nomemo
    def _cond_(self):
        self._logical_or_expr_()
        self.name_last_node('check_expr')
        self._token('?')
        self._expr_()
        self.name_last_node('true_expr')
        self._token(':')
        self._expr_()
        self.name_last_node('false_expr')
        self._define(['check_expr', 'false_expr', 'true_expr'], [])

    @tatsumasu()
    @leftrec
    def _logical_or_expr_(self):
        with self._choice():
            with self._option():
                self._logical_or_()
                self.name_last_node('@')
            with self._option():
                self._logical_and_expr_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<inclusive_or_expr> <logical_and>'
                '<logical_and_expr> <logical_or>'
                '<logical_or_expr>'
            )

    @tatsumasu('BinaryExpr')
    @nomemo
    def _logical_or_(self):
        self._logical_or_expr_()
        self.add_last_node_to_name('args')
        self._token('||')
        self.name_last_node('op')
        self._logical_and_expr_()
        self.add_last_node_to_name('args')
        self._define(
            ['op'],
            ['args'],
        )

    @tatsumasu()
    @leftrec
    def _logical_and_expr_(self):
        with self._choice():
            with self._option():
                self._logical_and_()
                self.name_last_node('@')
            with self._option():
                self._inclusive_or_expr_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<exclusive_or_expr> <inclusive_or>'
                '<inclusive_or_expr> <logical_and>'
                '<logical_and_expr>'
            )

    @tatsumasu('BinaryExpr')
    @nomemo
    def _logical_and_(self):
        self._logical_and_expr_()
        self.add_last_node_to_name('args')
        self._token('&&')
        self.name_last_node('op')
        self._equality_expr_()
        self.add_last_node_to_name('args')
        self._define(
            ['op'],
            ['args'],
        )

    @tatsumasu()
    @leftrec
    def _inclusive_or_expr_(self):
        with self._choice():
            with self._option():
                self._inclusive_or_()
                self.name_last_node('@')
            with self._option():
                self._exclusive_or_expr_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<and_expr> <exclusive_or>'
                '<exclusive_or_expr> <inclusive_or>'
                '<inclusive_or_expr>'
            )

    @tatsumasu('BinaryExpr')
    @nomemo
    def _inclusive_or_(self):
        self._inclusive_or_expr_()
        self.add_last_node_to_name('args')
        self._token('|')
        self.name_last_node('op')
        self._exclusive_or_expr_()
        self.add_last_node_to_name('args')
        self._define(
            ['op'],
            ['args'],
        )

    @tatsumasu()
    @leftrec
    def _exclusive_or_expr_(self):
        with self._choice():
            with self._option():
                self._exclusive_or_()
                self.name_last_node('@')
            with self._option():
                self._and_expr_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<and> <and_expr> <equality_expr>'
                '<exclusive_or> <exclusive_or_expr>'
            )

    @tatsumasu('BinaryExpr')
    @nomemo
    def _exclusive_or_(self):
        self._exclusive_or_expr_()
        self.add_last_node_to_name('args')
        self._token('^')
        self.name_last_node('op')
        self._and_expr_()
        self.add_last_node_to_name('args')
        self._define(
            ['op'],
            ['args'],
        )

    @tatsumasu()
    @leftrec
    def _and_expr_(self):
        with self._choice():
            with self._option():
                self._and_()
                self.name_last_node('@')
            with self._option():
                self._equality_expr_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<and> <and_expr> <equality>'
                '<equality_expr> <relational_expr>'
            )

    @tatsumasu('BinaryExpr')
    @nomemo
    def _and_(self):
        self._and_expr_()
        self.add_last_node_to_name('args')
        self._token('&')
        self.name_last_node('op')
        self._equality_expr_()
        self.add_last_node_to_name('args')
        self._define(
            ['op'],
            ['args'],
        )

    @tatsumasu()
    @leftrec
    def _equality_expr_(self):
        with self._choice():
            with self._option():
                self._equality_()
                self.name_last_node('@')
            with self._option():
                self._relational_expr_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<equality> <equality_expr> <relational>'
                '<relational_expr> <shift_expr>'
            )

    @tatsumasu('BinaryExpr')
    @nomemo
    def _equality_(self):
        self._equality_expr_()
        self.add_last_node_to_name('args')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('==')
                with self._option():
                    self._token('!=')
                self._error(
                    'expecting one of: '
                    "'!=' '=='"
                )
        self.name_last_node('op')
        self._relational_expr_()
        self.add_last_node_to_name('args')
        self._define(
            ['op'],
            ['args'],
        )

    @tatsumasu()
    @leftrec
    def _relational_expr_(self):
        with self._choice():
            with self._option():
                self._relational_()
                self.name_last_node('@')
            with self._option():
                self._shift_expr_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<additive_expr> <relational>'
                '<relational_expr> <shift> <shift_expr>'
            )

    @tatsumasu('BinaryExpr')
    @nomemo
    def _relational_(self):
        self._relational_expr_()
        self.add_last_node_to_name('args')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('<=')
                with self._option():
                    self._token('>=')
                with self._option():
                    self._token('<')
                with self._option():
                    self._token('>')
                self._error(
                    'expecting one of: '
                    "'<' '<=' '>' '>='"
                )
        self.name_last_node('op')
        self._additive_expr_()
        self.add_last_node_to_name('args')
        self._define(
            ['op'],
            ['args'],
        )

    @tatsumasu()
    @leftrec
    def _shift_expr_(self):
        with self._choice():
            with self._option():
                self._shift_()
                self.name_last_node('@')
            with self._option():
                self._additive_expr_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<additive> <additive_expr>'
                '<multiplicative_expr> <shift>'
                '<shift_expr>'
            )

    @tatsumasu('BinaryExpr')
    @nomemo
    def _shift_(self):
        self._shift_expr_()
        self.add_last_node_to_name('args')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('<<')
                with self._option():
                    self._token('>>')
                self._error(
                    'expecting one of: '
                    "'<<' '>>'"
                )
        self.name_last_node('op')
        self._additive_expr_()
        self.add_last_node_to_name('args')
        self._define(
            ['op'],
            ['args'],
        )

    @tatsumasu()
    @leftrec
    def _additive_expr_(self):
        with self._choice():
            with self._option():
                self._additive_()
                self.name_last_node('@')
            with self._option():
                self._multiplicative_expr_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<additive> <additive_expr> <cast_expr>'
                '<multiplicative> <multiplicative_expr>'
            )

    @tatsumasu('BinaryExpr')
    @nomemo
    def _additive_(self):
        self._additive_expr_()
        self.add_last_node_to_name('args')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('+')
                with self._option():
                    self._token('-')
                self._error(
                    'expecting one of: '
                    "'+' '-'"
                )
        self.name_last_node('op')
        self._multiplicative_expr_()
        self.add_last_node_to_name('args')
        self._define(
            ['op'],
            ['args'],
        )

    @tatsumasu()
    @leftrec
    def _multiplicative_expr_(self):
        with self._choice():
            with self._option():
                self._multiplicative_()
                self.name_last_node('@')
            with self._option():
                self._cast_expr_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<cast> <cast_expr> <multiplicative>'
                '<multiplicative_expr> <unary_expr>'
            )

    @tatsumasu('BinaryExpr')
    @nomemo
    def _multiplicative_(self):
        self._multiplicative_expr_()
        self.add_last_node_to_name('args')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('*')
                with self._option():
                    self._token('/')
                with self._option():
                    self._token('%')
                self._error(
                    'expecting one of: '
                    "'%' '*' '/'"
                )
        self.name_last_node('op')
        self._cast_expr_()
        self.add_last_node_to_name('args')
        self._define(
            ['op'],
            ['args'],
        )

    @tatsumasu()
    def _cast_expr_(self):
        with self._choice():
            with self._option():
                self._cast_()
                self.name_last_node('@')
            with self._option():
                self._unary_expr_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                "'(' <cast> <dereference> <postfix_expr>"
                '<reference> <unary> <unary_expr>'
            )

    @tatsumasu('CastExpr')
    def _cast_(self):
        self._token('(')
        self._type_name_()
        self.name_last_node('type')
        self._token(')')
        self._cast_expr_()
        self.name_last_node('arg')
        self._define(['arg', 'type'], [])

    @tatsumasu('TypeName')
    def _type_name_(self):
        self._type_specifier_()
        self.name_last_node('specifier')
        with self._optional():
            self._abstract_declarator_()
            self.name_last_node('decl')
        self._define(['decl', 'specifier'], [])

    @tatsumasu('AbstractDeclarator')
    def _abstract_declarator_(self):
        self._pointer_()
        self.name_last_node('ptr')

    @tatsumasu()
    @nomemo
    def _unary_expr_(self):
        with self._choice():
            with self._option():
                self._unary_()
                self.name_last_node('@')
            with self._option():
                self._postfix_expr_()
                self.name_last_node('@')
            with self._option():
                self._dereference_()
                self.name_last_node('@')
            with self._option():
                self._reference_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                "'!' '&' '*' '+' '++' '-' '--' '~'"
                '<dereference> <postfix_expr>'
                '<postfix_func>'
                '<postfix_increment_or_decrement>'
                '<postfix_list> <postfix_pointer>'
                '<postfix_struct> <primary_expr>'
                '<reference> <unary>'
            )

    @tatsumasu('UnaryExpr')
    def _unary_(self):
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('++')
                        with self._option():
                            self._token('--')
                        self._error(
                            'expecting one of: '
                            "'++' '--'"
                        )
                self.name_last_node('op')
                self._unary_expr_()
                self.name_last_node('expr')
                self._define(['expr', 'op'], [])
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('+')
                        with self._option():
                            self._token('-')
                        with self._option():
                            self._token('!')
                        with self._option():
                            self._token('~')
                        self._error(
                            'expecting one of: '
                            "'!' '+' '-' '~'"
                        )
                self.name_last_node('op')
                self._cast_expr_()
                self.name_last_node('expr')
                self._define(['expr', 'op'], [])
            self._error(
                'expecting one of: '
                "'!' '+' '++' '-' '--' '~'"
            )

    @tatsumasu('Dereference')
    def _dereference_(self):
        self._token('*')
        self._cast_expr_()
        self.name_last_node('arg')
        self._define(['arg'], [])

    @tatsumasu('Reference')
    def _reference_(self):
        self._token('&')
        self._cast_expr_()
        self.name_last_node('arg')
        self._define(['arg'], [])

    @tatsumasu()
    @leftrec
    def _postfix_expr_(self):
        with self._choice():
            with self._option():
                self._postfix_list_()
                self.name_last_node('@')
            with self._option():
                self._postfix_func_()
                self.name_last_node('@')
            with self._option():
                self._postfix_struct_()
                self.name_last_node('@')
            with self._option():
                self._postfix_pointer_()
                self.name_last_node('@')
            with self._option():
                self._postfix_increment_or_decrement_()
                self.name_last_node('@')
            with self._option():
                self._primary_expr_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<identifier_expr> <number>'
                '<parenthesis_expr> <postfix_expr>'
                '<postfix_func>'
                '<postfix_increment_or_decrement>'
                '<postfix_list> <postfix_pointer>'
                '<postfix_struct> <primary_expr>'
            )

    @tatsumasu('PostfixListExpr')
    @nomemo
    def _postfix_list_(self):
        self._postfix_expr_()
        self.name_last_node('postfix')
        self._token('[')
        self._expr_()
        self.name_last_node('index')
        self._token(']')
        self._define(['index', 'postfix'], [])

    @tatsumasu('PostfixFuncExpr')
    @nomemo
    def _postfix_func_(self):
        self._postfix_expr_()
        self.name_last_node('postfix')
        self._token('(')

        def sep0():
            self._token(',')

        def block1():
            self._assignment_expr_()
        self._gather(block1, sep0)
        self.name_last_node('args')
        self._token(')')
        self._define(['args', 'postfix'], [])

    @tatsumasu('PostfixStructExpr')
    @nomemo
    def _postfix_struct_(self):
        self._postfix_expr_()
        self.name_last_node('postfix')
        self._token('.')
        self._identifier_()
        self.name_last_node('field')
        self._define(['field', 'postfix'], [])

    @tatsumasu('PostfixPointerExpr')
    @nomemo
    def _postfix_pointer_(self):
        self._postfix_expr_()
        self.name_last_node('postfix')
        self._token('->')
        self._identifier_()
        self.name_last_node('field')
        self._define(['field', 'postfix'], [])

    @tatsumasu('PostfixCrementExpr')
    @nomemo
    def _postfix_increment_or_decrement_(self):
        self._postfix_expr_()
        self.name_last_node('postfix')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('++')
                with self._option():
                    self._token('--')
                self._error(
                    'expecting one of: '
                    "'++' '--'"
                )
        self.name_last_node('op')
        self._define(['op', 'postfix'], [])

    @tatsumasu()
    def _primary_expr_(self):
        with self._choice():
            with self._option():
                self._parenthesis_expr_()
                self.name_last_node('@')
            with self._option():
                self._identifier_expr_()
                self.name_last_node('@')
            with self._option():
                self._number_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                "'(' <double> <float> <identifier>"
                '<identifier_expr> <int> <number>'
                '<parenthesis_expr>'
            )

    @tatsumasu('ParenthesisExpr')
    def _parenthesis_expr_(self):
        self._token('(')
        self._expr_()
        self.name_last_node('arg')
        self._token(')')
        self._define(['arg'], [])

    @tatsumasu('IdentifierExpr')
    def _identifier_expr_(self):
        self._identifier_()
        self.name_last_node('name')

    @tatsumasu('Number')
    def _number_(self):
        with self._choice():
            with self._option():
                self._float_()
                self.name_last_node('value')
                self._constant('float')
                self.name_last_node('type')
                self._define(['type', 'value'], [])
            with self._option():
                self._double_()
                self.name_last_node('value')
                self._constant('double')
                self.name_last_node('type')
                self._define(['type', 'value'], [])
            with self._option():
                self._int_()
                self.name_last_node('value')
                self._constant('int')
                self.name_last_node('type')
                self._define(['type', 'value'], [])
            self._error(
                'expecting one of: '
                '(\\d+\\.\\d+)f <double> <float> <int> \\d+'
                '\\d+\\.\\d+'
            )

    @tatsumasu('int')
    def _int_(self):
        self._pattern('\\d+')

    @tatsumasu('float')
    def _double_(self):
        self._pattern('\\d+\\.\\d+')

    @tatsumasu('float')
    def _float_(self):
        self._pattern('(\\d+\\.\\d+)f')

    @tatsumasu('Identifier')
    def _identifier_(self):
        self._pattern('[A-Za-z_][A-Za-z_0-9]*')
        self.name_last_node('name')


def main(filename, **kwargs):
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        text = Path(filename).read_text()
    parser = minCParser()
    return parser.parse(
        text,
        filename=filename,
        **kwargs,
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, minCParser, name='minC')
    data = asjson(ast)
    print(json.dumps(data, indent=2))

